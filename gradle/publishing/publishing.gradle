import java.nio.file.Files

ext /* -ra properties */ {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file("gradle/publishing/publishing.properties")))
    properties.forEach((k, v) -> set(k, v))

    version_valid = versionValidForPublishing(version)
    published_version_name = version_valid ? makeName(version) : "INVALID"
    changelog_text = getChangelog(file(changelog_file))
    built_jar = getBuiltJar(file(build_output))
}

task publishMod {
    if (version_valid) {
        dependsOn(tasks.getByName("modrinth"))
        dependsOn(tasks.getByName("curseforge"))
    }
}

static String makeName(String version) {
    // version example: 0.5.0.h-861+1.18.2
    return "Create " + version.replace("-", " build ").replace("+", " for ")
    // Create 0.5.0.h build 861 for 1.18.2
}

static boolean versionValidForPublishing(String version) {
    return version.contains("-") && version.contains("+")
}

static String getChangelog(File changelogFile) {
    String text = Files.readString(changelogFile.toPath())
    String[] split = text.split("----------")
    if (split.length != 2)
        throw new IllegalStateException("Malformed changelog")
    return split[1].trim()
}

static File getBuiltJar(File dir) {
    File[] files = dir.listFiles()
    File valid = null
    Files: for (File file : files) {
        String name = file.getName()
        for (String suffix : [ "sources", "dev", "javadoc" ]) {
            if (name.endsWith("-$suffix.jar")) {
                break Files
            }
            if (valid != null) {
                throw new IllegalStateException("Multiple valid built files: $name and ${valid.getName()}")
            }
            valid = file
        }
    }
}

apply from: "gradle/publishing/modrinth.gradle"
apply from: "gradle/publishing/maven.gradle"
